pipeline {
    agent any

    environment {
        
        IMAGE_NAME = "my-java-app"
        IMAGE_TAG = "${BUILD_NUMBER}"
        ACR_NAME = 'myregistry018'  // Without .azurecr.io
       
    }

    parameters {
        string(name: 'BRANCH_TAG', defaultValue: 'main', description: 'Git Branch or Tag')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${params.BRANCH_TAG}", url: 'https://github.com/gnanendra9398/DEVOPS.git'
            }
        }

        stage('Build') {
            steps {
                dir('hello-java') { 
                    sh 'mvn clean install -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                dir('hello-java') {
                    sh 'mvn test'
                }
            }
        }

        stage('ACR Login') {
            steps {
              withCredentials([
                    string(credentialsId: 'azure-sp-creds', variable: 'AZURE_CREDENTIALS_JSON')
                ]) {
                    writeFile file: 'azure.json', text: "${AZURE_CREDENTIALS_JSON}"
                    sh '''
                        CLIENT_ID=$(jq -r .clientId azure.json)
                        CLIENT_SECRET=$(jq -r .clientSecret azure.json)
                        TENANT_ID=$(jq -r .tenantId azure.json)
                        az login --service-principal -u $CLIENT_ID -p $CLIENT_SECRET --tenant $TENANT_ID
                    '''
                }
            }

        }

        stage('Build Docker Image') {
            steps {
                dir('hello-java'){
                sh 'docker build -t gnanendra9398/$IMAGE_NAME:${BUILD_NUMBER} .'
            }
        }
        }
        stage('Push Image') {
               steps {
                script {
                    def imageTag = "${ACR_NAME}.azurecr.io/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh """
                        docker tag ${IMAGE_NAME}:${BUILD_NUMBER} ${imageTag}
                        az acr login --name ${ACR_NAME}
                        docker push ${imageTag}
                    """
                }
            }
        }
        stage('remove image') {
            steps {
                sh '''
                       docker images --format "{{.Repository}}:{{.Tag}}" | \
                       grep "my-java-app" | sort -t ':' -k2 -n | head -n -1 | xargs -r docker rmi
                       '''
    }
        }        
  }
}    
